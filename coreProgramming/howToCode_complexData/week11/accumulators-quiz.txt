;  PROBLEM 1:
;  
;  Assuming the use of at least one accumulator, design a function that consumes a list of strings,
;  and produces the length of the longest string in the list. 
;  


;; (listof Strings) -> Integer
;; produce the length of the longest string from the given (listof String)
;(check-expect (longest-string empty) 0)
;(check-expect (longest-string (list "")) 0)
;(check-expect (longest-string (list "hi")) 2)
;(check-expect (longest-string (list "you" "morgen" "yes")) 6)

(define (longest-string los0)
  ;; len: record the length of the last passed string
  (local [(define (longest-string los len)
            (cond [(empty? los) len]
                  [else
                   (longest-string (rest los)
                                   (local [(define try (string-length (first los)))]
                                     (if (> try len)
                                         try
                                         len)))]))]

    (longest-string los0 0)))

;  PROBLEM 2:
;  
;  The Fibbonacci Sequence https://en.wikipedia.org/wiki/Fibonacci_number is 
;  the sequence 0, 1, 1, 2, 3, 5, 8, 13,... where the nth element is equal to 
;  n-2 + n-1. 
;  
;  Design a function that given a list of numbers at least two elements long, 
;  determines if the list obeys the fibonacci rule, n-2 + n-1 = n, for every 
;  element in the list. The sequence does not have to start at zero, so for 
;  example, the sequence 4, 5, 9, 14, 23 would follow the rule. 
;  


;; (listof Natural) -> Boolean
;; produce true if the given list forms a fibonacci sequence
(check-expect (fibonacci? (list empty empty empty)) true)
(check-expect (fibonacci? (list 0 0 0)) false)
(check-expect (fibonacci? (list 0 1 1)) true)
(check-expect (fibonacci? (list 1 1 2)) true)
(check-expect (fibonacci? (list 0 1 1 2 3 5 8 13)) true)
(check-expect (fibonacci? (list 0 1 1 2 3 5 9 13)) false)
(check-expect (fibonacci? (list 4 5 9 14 23)) true)
(check-expect (fibonacci? (list 4 5 7 24 23)) false)

(define (fibonacci? lon0)
  ;; pos: the value of the passed element from lon0
  ;; vor1: the value previously passed from lon0
  ;; vor2: the value passed from lon0 just before vor1 was passed
  (local [(define (fibonacci? lon vor2 vor1 c)
            (cond [(empty? c) true]
                  [else
                   (if (= c (+ vor1 vor2))
                       (fibonacci? (rest lon)
                                   vor1
                                   c
                                   (first (rest (rest (rest lon)))))
                       false)]))]

    (fibonacci? lon0 (first lon0) (second lon0) (first (rest (rest lon0))))))


;  PROBLEM 3:
;  
;  Refactor the function below to make it tail recursive.  
;  


;; Natural -> Natural
;; produces the factorial of the given number
(check-expect (fact 0) 1)
(check-expect (fact 3) 6)
(check-expect (fact 5) 120)

#;
(define (fact n)
  (cond [(zero? n) 1]
        [else 
         (* n (fact (sub1 n)))]))

(define (fact n0)
  (local [(define (fact n acc)
            (cond [(zero? n) (* 1 acc)]
                  [else 
                   (fact (sub1 n) (* n acc))]))]

    (fact n0 1)))



;  PROBLEM 4:
;  
;  Recall the data definition for Region from the Abstraction Quiz. Use a worklist 
;  accumulator to design a tail recursive function that counts the number of regions 
;  within and including a given region. 
;  So (count-regions CANADA) should produce 7



(define-struct region (name type subregions))
;; Region is (make-region String Type (listof Region))
;; interp. a geographical region

;; Type is one of:
;; - "Continent"
;; - "Country"
;; - "Province"
;; - "State"
;; - "City"
;; interp. categories of geographical regions

(define VANCOUVER (make-region "Vancouver" "City" empty))
(define VICTORIA (make-region "Victoria" "City" empty))
(define BC (make-region "British Columbia" "Province" (list VANCOUVER VICTORIA)))
(define CALGARY (make-region "Calgary" "City" empty))
(define EDMONTON (make-region "Edmonton" "City" empty))
(define ALBERTA (make-region "Alberta" "Province" (list CALGARY EDMONTON)))
(define CANADA (make-region "Canada" "Country" (list BC ALBERTA)))

#;
(define (fn-for-region r)
  (local [(define (fn-for-region r)
            (... (region-name r)
                 (fn-for-type (region-type r))
                 (fn-for-lor (region-subregions r))))
          
          (define (fn-for-type t)
            (cond [(string=? t "Continent") (...)]
                  [(string=? t "Country") (...)]
                  [(string=? t "Province") (...)]
                  [(string=? t "State") (...)]
                  [(string=? t "City") (...)]))
          
          (define (fn-for-lor lor)
            (cond [(empty? lor) (...)]
                  [else 
                   (... (fn-for-region (first lor))
                        (fn-for-lor (rest lor)))]))]
    (fn-for-region r)))


;; Functions

;; Region -> Natural
;; produce the number of regions within a given region
(check-expect (count-regions VANCOUVER) 1)
(check-expect (count-regions BC) 3)
(check-expect (count-regions CANADA) 7)

(define (count-regions r0)
  ;; todo: a list of regions to be counted
  ;; count: a record of the current region count
  (local [(define (fn-for-region r todo count)
            (fn-for-todo (append (region-subregions r) todo) (add1 count)))
          
          (define (fn-for-todo todo count)
            (cond [(empty? todo) count]
                  [else 
                   (fn-for-region (first todo) (rest todo) count)]))]
    
    (fn-for-region r0 empty 0)))





