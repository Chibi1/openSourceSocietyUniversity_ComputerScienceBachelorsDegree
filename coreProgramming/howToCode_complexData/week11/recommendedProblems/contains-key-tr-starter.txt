
;; bt-contains-tr-starter.rkt

; Problem:
; 
; Starting with the following data definition for a binary tree (not a binary search tree) 
; design a tail-recursive function called contains? that consumes a key and a binary tree 
; and produces true if the tree contains the key.
; 


(define-struct node (k v l r))
;; BT is one of:
;;  - false
;;  - (make-node Integer String BT BT)
;; Interp. A binary tree, each node has a key, value and 2 children
(define BT1 false)
(define BT2 (make-node 1 "a"
                       (make-node 6 "f"
                                  (make-node 4 "d" false false)
                                  false)
                       (make-node 7 "g" false false)))


;; Functions

;; Integer BT -> Boolean
;; produce true if a given binary tree contains the given key, else false
(check-expect (contains? 1 BT2) true)
(check-expect (contains? 6 BT2) true)
(check-expect (contains? 4 BT2) true)
(check-expect (contains? 2 BT2) false)

#;
(define (contains? k bt)
  (cond [(false? bt) false]
        [else
         (or (= (node-k bt) k)
             (contains? k (node-l bt))
             (contains? k (node-r bt)))]))


(define (contains? k bt0)
  ;; todo: a list of nodes that are to be searched for k
  (local [(define (fn-for-bt k bt todo)
            (cond [(false? bt) (fn-for-todo todo)]
                  [else
                   (if (= (node-k bt) k)
                       true
                       (fn-for-bt k (node-l bt) (cons (node-r bt) todo)))]))

          (define (fn-for-todo todo)
            (cond [(empty? todo) false]
                  [else
                   (fn-for-bt k (first todo) (rest todo))]))]

    (fn-for-bt k bt0 empty)))




