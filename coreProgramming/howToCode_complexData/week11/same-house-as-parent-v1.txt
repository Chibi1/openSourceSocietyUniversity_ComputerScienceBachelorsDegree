
;; same-house-as-parent-v1.rkt

; 
; PROBLEM:
; 
; In the Harry Potter movies, it is very important which of the four houses a
; wizard is placed in when they are at Hogwarts. This is so important that in 
; most families multiple generations of wizards are all placed in the same family. 
; 
; Design a representation of wizard family trees that includes, for each wizard,
; their name, the house they were placed in at Hogwarts and their children. We
; encourage you to get real information for wizard families from: 
;    http://harrypotter.wikia.com/wiki/Main_Page
; 
; The reason we do this is that designing programs often involves collection
; domain information from a variety of sources and representing it in the program
; as constants of some form. So this problem illustrates a fairly common scenario.
; 
; That said, for reasons having to do entirely with making things fit on the
; screen in later videos, we are going to use the following wizard family tree,
; in which wizards and houses both have 1 letter names. (Sigh)
; 
; 


;; Data Definitions:

(define-struct wizard (name house children))
;; Wizard is (make-wizard String String (listof Wizard))
;; interp. a wizard with:
;;  - name
;;  - house
;;  - a list of their children

(define HARRY (make-wizard "Harry Potter" "Gryffindor" empty))
(define Wa (make-wizard "A" "S" empty))
(define Wb (make-wizard "B" "G" empty))
(define Wc (make-wizard "C" "R" empty))
(define Wd (make-wizard "D" "H" empty))
(define We (make-wizard "E" "R" empty))
(define Wf (make-wizard "F" "R" (list Wb)))
(define Wg (make-wizard "G" "S" (list Wa)))
(define Wh (make-wizard "H" "S" (list Wc Wd)))
(define Wi (make-wizard "I" "H" empty))
(define Wj (make-wizard "J" "R" (list We Wf Wg)))
(define Wk (make-wizard "K" "G" (list Wh Wi Wj)))

#; ;template, arb-arity encapsulated w/ local
(define (fn-for-wizard w)
  (local [(define (fn-for-wizard w)
            (... (wizard-name w)
                 (wizard-house w)
                 (fn-for-low (wizard-children w))))

          (define (fn-for-low low)
            (cond [(empty? low) (...)]
                  [else
                   (... (fn-for-wizard (first low))
                        (fn-for-low (rest low)))]))]

    (fn-for-wizard w)))


; 
; PROBLEM:
; 
; Design a function that consumes a wizard and produces the names of every 
; wizard in the tree that was placed in the same house as their immediate
; parent. 
; 


; ;; Function Definitions:
; (check-expect (same-house Wa) empty)
; (check-expect (same-house Wh) empty)
; (check-expect (same-house Wg) (list "A"))
; (check-expect (same-house Wk) (list "E" "F" "A"))
; 
; ; template from Wizard plus the lost context accumulator
; (define (same-house w)
;   ;; parent-house is String; the house of this wizard's immeediate parent ("" for root of tree)
;   ;; (same-house Wk)       ;trampoline call
;   ;; (fn-for-wizard Wk "")
;   ;; (fn-for-wizard Wh "G")
;   ;; (fn-for-wizard Wc "S")
;   ;; (fn-for-wizard Wd "S")
;   ;; (fn-for-wizard Wi "G")
;   (local [(define (same-house w parent-house)
;             (if (string=? (wizard-house w) parent-house)
;                 (cons (wizard-name w)
;                       (fn-for-low (wizard-children w)
;                                   (wizard-house w)))
;                 (fn-for-low (wizard-children w)
;                             (wizard-house w))))
; 
;           (define (fn-for-low low parent-house)
;             (cond [(empty? low) empty]
;                   [else
;                    (append (same-house (first low) parent-house)
;                            (fn-for-low (rest low) parent-house))]))]
; 
;     (same-house w "")))
; 







; 
; PROBLEM:
; 
; Design a function that consumes a wizard and produces the number of wizards 
; in that tree (including the root). Your function should be tail recursive.
; 


; ;; Wizard -> Natural
; ;; produce the number of wizards in that tree (including the root)
; (check-expect (count Wa) 1)
; (check-expect (count Wk) 11)
; 
; ;template from Wizard, add an accumulator for tail recursion
; 
; (define (count w)
;   ;; rsf is Natural; the number of wizards seen so far
;   ;; todo is (listof Wizard) ; wizards we still need to visit with fn-for-wizard
;   ;; (count Wk)
;   ;; (fn-for-wizard Wk 0)
;   ;; (fn-for-wizard Wh 1)
;   ;; (fn-for-wizard Wc 2)
;   (local [(define (fn-for-wizard w todo rsf)  
;             (fn-for-low (append (wizard-children w) todo)
;                         (add1 rsf)))
; 
;           (define (fn-for-low todo rsf)
;             (cond [(empty? todo) rsf]
;                   [else
;                    (fn-for-wizard (first todo) (rest todo) rsf)]))]
; 
;     (fn-for-wizard w empty 0)))
; 


; 
; PROBLEM:
; 
; Design a new function definition for same-house-as-parent that is tail 
; recursive. You will need a worklist accumulator.
; 
; 


;; Function Definitions:
(check-expect (same-house Wa) empty)
(check-expect (same-house Wh) empty)
(check-expect (same-house Wg) (list "A"))
(check-expect (same-house Wk) (list "A" "F" "E"))

;template from Wizard (arb-arity tree, wrapped in local)
;         added worklist accumulator for tail recursion
;         added results so far accumulator for tail recursion
;         added compound data definition for wish list entries

(define (same-house w)
  ;; todo is (listof ...); a worklist accumulator
  ;; rsf  is (listof String); a result so far accumulator
  (local [
          (define-struct wle (w ph))
          ;; WLE (worklist entry) is (make-wle Wizard String)
          ;; interp. a worklist entry with the wizard to pass to fn-for-wizard
          ;;         and that wizards parent house

          (define (fn-for-wizard todo w ph rsf)
            ;(... (wizard-name w) (wizard-house w))
            (fn-for-low (append (map (lambda (k)
                                       (make-wle k (wizard-house w)))
                                     (wizard-children w))
                                todo)
                        (if (string=? (wizard-house w) ph)
                            (cons (wizard-name w) rsf)
                            rsf)))

          (define (fn-for-low todo rsf)
            (cond [(empty? todo) rsf]
                  [else
                   (fn-for-wizard (rest todo)
                                  (wle-w (first todo))
                                  (wle-ph (first todo))
                                  rsf)]))]

    (fn-for-wizard empty w "" empty)))





