
;; movie-starter.rkt

;; =================
;; Data definitions:

; 
; PROBLEM A:
; 
; Design a data definition to represent a movie, including  
; title, budget, and year released.
; 
; To help you to create some examples, find some interesting movie facts below: 
; "Titanic" - budget: 200000000 released: 1997
; "Avatar" - budget: 237000000 released: 2009
; "The Avengers" - budget: 220000000 released: 2012
; 
; However, feel free to resarch more on your own!
; 


(define-struct movie (title budget year-released))
;; Movie is (make-movie String Number Number)
;; interp. a movie has a title, a budget and a year of release

(define MOVIE-1 (make-movie "Happy Days" 1000 1984))

#; (define (fn-for-movie m)
     (... (movie-title title)                     ;String
          (movie-budget budget)                   ;Number
          (movie-year-released year-released)))   ;Number

;; Template rules used:
;;  - Compound: 3 cases


;; =================
;; Functions:

; 
; PROBLEM B:
; 
; You have a list of movies you want to watch, but you like to watch your 
; rentals in chronological order. Design a function that consumes two movies 
; and produces the title of the most recently released movie.
; 
; Note that the rule for templating a function that consumes two compound data 
; parameters is for the template to include all the selectors for both 
; parameters.
; 


;; Movie, Movie -> Movie
;; produces the most recently released movie title given two movies to sort
(check-expect (newer (make-movie "Titanic" 200000000 1997) (make-movie "Avatar" 237000000 2009)) "Avatar")
(check-expect (newer (make-movie "The Avengers" 220000000 2012) (make-movie "Avatar" 237000000 2009)) "The Avengers")
(check-expect (newer (make-movie "Titanic" 200000000 2009) (make-movie "Avatar" 237000000 2009)) "Titanic")           ; same release year

;(define (newer m1 m2) false)    ;stub

;;<Template taken from Movie>
(define (newer m1 m2)
     (cond [(> (movie-year-released m1) (movie-year-released m2))
            (movie-title m1)]
           [(> (movie-year-released m2) (movie-year-released m1))
            (movie-title m2)]
           [(= (movie-year-released m1) (movie-year-released m2))
            (movie-title m1)]
           ))


