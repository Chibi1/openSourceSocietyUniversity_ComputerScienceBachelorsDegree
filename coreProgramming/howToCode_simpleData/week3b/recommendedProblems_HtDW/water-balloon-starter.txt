
;; water-balloon-starter.rkt

; PROBLEM:
; 
; In this problem, we will design an animation of throwing a water balloon.  
; When the program starts the water balloon should appear on the left side 
; of the screen, half-way up.  Since the balloon was thrown, it should 
; fly across the screen, rotating in a clockwise fashion. Pressing the 
; space key should cause the program to start over with the water balloon
; back at the left side of the screen. 
; 
; NOTE: Please include your domain analysis at the top in a comment box. 
; 
; Use the following images to assist you with your domain analysis:
; 
; 
; 1)
; 2).
; .
; 3)
; .
; 4)
; 
; .
;     
; 
; Here is an image of the water balloon:
; (define WATER-BALLOON.)
; 
; 
; 
; NOTE: The rotate function wants an angle in degrees as its first 
; argument. By that it means Number[0, 360). As time goes by your balloon 
; may end up spinning more than once, for example, you may get to a point 
; where it has spun 362 degrees, which rotate won't accept. 
; 
; The solution to that is to use the modulo function as follows:
; 
; (rotate (modulo ... 360) (text "hello" 30 "black"))
; 
; where ... should be replaced by the number of degrees to rotate.
; 
; NOTE: It is possible to design this program with simple atomic data, 
; but we would like you to use compound data.




(require 2htdp/image)
(require 2htdp/universe)

;; Throw rotating balloon from left to right across the screen

;; =================
;; Constants:

(define WIDTH  600)
(define HEIGHT 400)

(define CTR-Y (/ HEIGHT 2))

(define WATER-BALLOON .)

(define MTS (empty-scene WIDTH HEIGHT))

(define FULL-ROTATION 360)


;; =================
;; Data definitions:

(define-struct balloon (x dx a rs))
;; Balloon is (make-balloon Interval[0, WIDTH] Natural Interval[0, 360] Natural)
;; interp. a balloon at
;;          position x
;;          at velocity dx
;;          at angle a
;;          at rotation speed rs

(define B1 (make-balloon 4 8 82 5))

#;
(define (fn-for-balloon b)
  (... (balloon-x  b)      ;Interval[0, WIDTH]
       (balloon-dx b)      ;Natural
       (balloon-a  b)      ;Interval[0, 360]
       (balloon-rs b)))    ;Natural    

;; Template rules used:
;;  - compound: 4 fields



;; =================
;; Functions:

;; Balloon -> Balloon
;; start the world with ...
;; 
(define (main b)
  (big-bang b                    ; Balloon
            (on-tick   tock)     ; Balloon -> Balloon
            (to-draw   render)   ; Balloon -> Image
            (on-key    reset)))    ; Balloon KeyEvent -> Balloon

;; Balloon -> Balloon
;; produce the next balloon image at the right height, speed and rotation
(check-expect (tock (make-balloon 33 3 95 4))
              (make-balloon (+ 33 3) 3 (- 95 4) 4))

;(define (tock b) false)    ;stub

(define (tock b)
  (make-balloon
   (+ (balloon-x  b) (balloon-dx b))
   (balloon-dx b)
   (- (balloon-a  b) (balloon-rs b))
   (balloon-rs b)))

;; Template taken from ballon


;; Balloon -> Image
;; render balloon image at correct x position and correct angle on MTS
(check-expect
 (render
  (make-balloon 33 3 45 75))
 (place-image
  (rotate (modulo 45  FULL-ROTATION) WATER-BALLOON)
  33 CTR-Y MTS))

(check-expect
 (render
  (make-balloon 33 3 540 75))
 (place-image
  (rotate (modulo 540 FULL-ROTATION) WATER-BALLOON)
  33 CTR-Y MTS))

;(define (render b) false)    ;stub

(define (render b)
  (place-image
   (rotate (modulo (balloon-a b) FULL-ROTATION) WATER-BALLOON)
   (balloon-x b) CTR-Y MTS)) 

;; Balloon -> Balloon
;; send the balloon back to the start on the left of the screen when spacebar is pressed 
(check-expect (reset (make-balloon 33 3 95 4) " ")
              (make-balloon 0 3 95 4))

;(define (reset b ke) false)    ;stub

(define (reset b ke)
  (cond [(key=? ke " ")
         (make-balloon
          0
          (balloon-dx b)
          (balloon-a  b)
          (balloon-rs b))]
        [else
         (make-balloon
          0
          (balloon-dx b)
          (balloon-a  b)
          (balloon-rs b))]))

;template taken from balloon

