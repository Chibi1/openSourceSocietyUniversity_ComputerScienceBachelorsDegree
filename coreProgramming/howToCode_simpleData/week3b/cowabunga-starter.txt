
; 
; PROBLEM:
; 
; As we learned in the cat world programs, cats have a mind of their own. When they 
; reach the edge they just keep walking out of the window.
; 
; Cows on the other hand are docile creatures. They stay inside the fence, walking
; back and forth nicely.
; 
; Design a world program with the following behaviour:
;    - A cow walks back and forth across the screen.
;    - When it gets to an edge it changes direction and goes back the other way
;    - When you start the program it should be possible to control how fast a
;      walker your cow is.
;    - Pressing space makes it change direction right away.
;    
; To help you here are two pictures of the right and left sides of a lovely cow that 
; was raised for us at Brown University.
; 
; .     .
; 
; Once your program works here is something you can try for fun. If you rotate the
; images of the cow slightly, and you vary the image you use as the cow moves, you
; can make it appear as if the cow is waddling as it walks across the screen.
; 
; Also, to make it look better, arrange for the cow to change direction when its
; nose hits the edge of the window, not the center of its body.
; 



;; Constants

(define WIDTH 600)
(define HEIGHT 400)

(define CTR-Y (/ HEIGHT 2))

(define MTS (empty-scene WIDTH HEIGHT))

(define RCOW .)
(define LCOW .)


;; Data Definitions

(define-struct cow (x dx))
;; Cow is (make-cow Natural[0, WIDTH] Integer)
;; interp. cow is travelling across the screen at position x and at dx velocity
;;         x is the centre of the cow
;;         x is in screen coordinates (pixels)
;;         dx is in pixels per ticks

(define COW1 (make-cow 350 3))    ;at position 350 moving left to right
(define COW2 (make-cow 250 -5))   ;at position 250 moving right to left

#;
(define (fn-for-cow c)
  (... (cow-x c)     ;Natural[0, WIDTH]
       (cox-dx c)))  ;Integer

;; Template rules used:
;;  - compound: 2 fields
