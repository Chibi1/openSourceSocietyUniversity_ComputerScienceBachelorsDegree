(require 2htdp/image)

;; image-list-starter.rkt

;; =================
;; Data definitions:

; 
; PROBLEM A:
; 
; Design a data definition to represent a list of images. Call it ListOfImage. 
; 


;; ListOfImage is one of:
;;  - empty
;;  - (cons Image ListOfImage)
;; interp. a list of Images

(define LOI-1 empty)
(define LOI-2 (cons (rectangle 20 10 "solid" "red") empty))
(define LOI-3 (cons (rectangle 20 15 "solid" "red") (cons (rectangle 40 30 "solid" "blue") empty)))

#;
(define (fn-for-loi loi)
  (cond [(empty? loi) (...)]                   ;BASE CASE
        [else (... (first loi)                 ;Image
                   (fn-for-loi (rest loi)))])) ;NATURAL RECURSION
;;             /
;;            /
;;       COMBINATION
;; Template rules used:
;;  - one of: 2 cases
;;  - atomic distinct: empty
;;  - compound: (cons Image ListOfImage)
;;  - self-reference: (rest loi) is ListOfImage

;; =================
;; Functions:

; 
; PROBLEM B:
; 
; Design a function that consumes a list of images and produces a number 
; that is the sum of the areas of each image. For area, just use the image's 
; width times its height.
; 


;; ListOfImage -> Number
;; produce the sum of the areas of each image
(check-expect (total-areas LOI-1) 0   )
(check-expect (total-areas LOI-2) 200 )
(check-expect (total-areas LOI-3) 1500)

;(define (total-areas loi) 0)    ;stub

(define (total-areas loi)
  (cond [(empty? loi) 0]
        [else (+ (* (image-width (first loi))
                    (image-height (first loi)))
                   (total-areas (rest loi)))]))

; template taken from ListOfImage



