(require 2htdp/image)
(require 2htdp/universe)

;; making-rain-filtered-starter.rkt

; 
; PROBLEM:
; 
; Design a simple interactive animation of rain falling down a screen. Wherever we click,
; a rain drop should be created and as time goes by it should fall. Over time the drops
; will reach the bottom of the screen and "fall off". You should filter these excess
; drops out of the world state - otherwise your program is continuing to tick and
; and draw them long after they are invisible.
; 
; In your design pay particular attention to the helper rules. In our solution we use
; these rules to split out helpers:
;   - function composition
;   - reference
;   - knowledge domain shift
;   
;   
; NOTE: This is a fairly long problem.  While you should be getting more comfortable with 
; world problems there is still a fair amount of work to do here. Our solution has 9
; functions including main. If you find it is taking you too long then jump ahead to the
; next homework problem and finish this later.
; 
; 


;; Make it rain where we want it to.

;; =================
;; Constants:

(define WIDTH  300)
(define HEIGHT 300)

(define SPEED 1)

(define DROP (ellipse 4 8 "solid" "blue"))

(define BACKDROP (rectangle WIDTH HEIGHT "solid" "light blue"))

;; =================
;; Data definitions:

(define-struct drop (x y))
;; Drop is (make-drop Integer Integer)
;; interp. A raindrop on the screen, with x and y coordinates.

(define D1 (make-drop 10 30))
(define D2 (make-drop 20 30))
(define D3 (make-drop 30 50))
(define D4 (make-drop 150 HEIGHT))
(define D5 (make-drop 150 (+ HEIGHT 200)))

#;
(define (fn-for-drop d)
  (... (drop-x d) 
       (drop-y d)))

;; Template Rules used:
;; - compound: 2 fields


;; ListOfDrop is one of:
;;  - empty
;;  - (cons Drop ListOfDrop)
;; interp. a list of drops

(define LOD1 empty)
(define LOD2 (cons (make-drop 10 20) (cons (make-drop 3 6) empty)))

#;
(define (fn-for-lod lod)
  (cond [(empty? lod) (...)]
        [else
         (... (fn-for-drop (first lod))
              (fn-for-lod (rest lod)))]))

;; Template Rules used:
;; - one-of: 2 cases
;; - atomic distinct: empty
;; - compound: (cons Drop ListOfDrop)
;; - reference: (first lod) is Drop
;; - self reference: (rest lod) is ListOfDrop

;; =================
;; Functions:

;; ListOfDrop -> ListOfDrop
;; start rain program by evaluating (main empty)
(define (main lod)
  (big-bang lod
            (on-mouse handle-mouse)   ; ListOfDrop Integer Integer MouseEvent -> ListOfDrop
            (on-tick  next-drops)     ; ListOfDrop -> ListOfDrop
            (to-draw  render-drops))) ; ListOfDrop -> Image


;; ListOfDrop Integer Integer MouseEvent -> ListOfDrop
;; if mevt is "button-down" add a new drop at that position
(check-expect (handle-mouse (cons D1 (cons D2 empty)) 60 50 "button-down")
              (cons (make-drop 60 50) (cons D1 (cons D2 empty))))
(check-expect (handle-mouse (cons D1 (cons D2 empty)) 60 50 "drag")
              (cons D1 (cons D2 empty)))

;(define (handle-mouse lod x y mevt) empty) ; stub

(define (handle-mouse lod x y mevt)
  (cond [(mouse=? mevt "button-down")
         (cons (make-drop x y)
               lod)]
        [else
         lod]))


;; ListOfDrop -> ListOfDrop
;; produce filtered and ticked list of drops
;; sort by lowest and then filter out the ones that passed the bottom limit
(check-expect (next-drops empty) empty)
(check-expect (next-drops (cons (make-drop 10 20) (cons (make-drop 3 HEIGHT) empty)))
              (cons (make-drop 10 (+ 20 SPEED)) empty))

;(define (next-drops lod) empty) ; stub

(define (next-drops lod)
  (filtered-list (ticked lod)))

;; ListOfDrop -> ListOfDrop
;; produce list of new drop positions after tick
(check-expect (ticked empty) empty)
(check-expect (ticked (cons (make-drop 10 20) (cons (make-drop 3 HEIGHT) empty)))
              (cons (make-drop 10 (+ 20 SPEED)) (cons (make-drop 3 (+ HEIGHT SPEED)) empty)))

;(define (ticked lod) empty)    ;stub

(define (ticked lod)
  (cond [(empty? lod) empty]
        [else
         (cons
          (tick (first lod))
          (ticked (rest lod)))]))


;; Drop -> Drop
;; produce next tick position
(check-expect (tick (make-drop 10 20))
              (make-drop 10 (+ 20 SPEED)))

;(define (tick d) false)    ;stub

(define (tick d)
  (make-drop (drop-x d) 
             (+ (drop-y d) SPEED)))


;; ListOfDrop -> ListOfDrop
;; produce new list of only the drops that are still on the screen
(check-expect (filtered-list empty) empty)
(check-expect (filtered-list (cons (make-drop 10 20) (cons (make-drop 3 HEIGHT) empty)))
              (cons (make-drop 10 20) empty))

;(define (filtered-list lod) empty)    ;stub

(define (filtered-list lod)
  (cond [(empty? lod) empty]
        [else
         (cond [(>= (+ (drop-y (first lod)) SPEED) HEIGHT)
                empty]
               [else
                (cons (first lod) (filtered-list (rest lod)))])]))


;; ListOfDrop -> Image
;; Render the drops onto BACKDROP
(check-expect (render-drops empty) BACKDROP)
(check-expect (render-drops (cons (make-drop 10 20) (cons (make-drop 3 200) (cons (make-drop 200 250) empty))))
              (place-image DROP 10 20
                           (place-image DROP 3 200
                                        (place-image DROP 200 250 BACKDROP))))

;(define (render-drops lod) BACKDROP) ; stub

(define (render-drops lod)
  (cond [(empty? lod) BACKDROP]
        [else
         (place-image DROP (drop-x (first lod)) (drop-y (first lod)) (render-drops (rest lod)))]))









